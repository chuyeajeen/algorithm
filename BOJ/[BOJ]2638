/*

**치즈 내부를 제외한 외부의 공기와 접촉한것만 찾는것이 포인트**
치즈일때 사방중 공기일때 bfs돌려 외부와 접촉하면 count+1.
사방 모두 bfs한번씩 돌려서 count>=2 이면 치즈 녹이기

*/

#include<iostream>
#include<queue>
#define MAX 101
using namespace std;

int n, m, arr[MAX][MAX], cpy[MAX][MAX];
int dx[4] = { 0,0,1,-1 };
int dy[4] = { 1,-1,0,0 };

void input()
{
	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
			cin >> arr[i][j];
	}
}


int bfs(int x, int y)
{
	queue <pair<int, int>> q;	//dir, x, y
	int visit[MAX][MAX] = { 0, };
	q.push({ x,y } );
	while (!q.empty())
	{
		int nx = q.front().first;
		int ny = q.front().second;

		q.pop();
		for (int dir = 0; dir < 4; dir++)
		{
			int nnx = nx + dx[dir];
			int nny = ny + dy[dir];

			if (nnx < 0 || nny < 0 || nnx >= n || nny >= m)
			{
				return 1;
			}

			else if (arr[nnx][nny] == 1) continue;
			else if (arr[nnx][nny] == 0 && visit[nnx][nny] == 0)
			{
				q.push( {nnx,nny } );
				visit[nnx][nny] = 1;
			}
		}
	}
	return 0;
	
}

void solution()
{

	bool check = true;;
	int answer=0;
	while (check)
	{
		check = false;
		answer++;
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				if (arr[i][j] == 1)
				{
					check = true;
					int count = 0;
					for (int k = 0; k < 4; k++)
					{
						int x = i + dx[k];
						int y = j + dy[k];
						if (arr[x][y] == 0)
						{
							count += bfs(x, y);    //1방향씩 bfs돌려서 공기와 접촉하면 counr+1
						}
					}
					if (count >= 2)    //2방향 이상 공기와 접촉
					{
						cpy[i][j] = 1;    //cpy에 녹은 치즈 좌표 저장
					}
				}
			}
		}

		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				if (cpy[i][j] == 1)
				{
					arr[i][j] = 0;
					cpy[i][j] = 0;
				}
			}
		}
	}

	cout << answer-1 << endl;
}

int main()
{
	input();
	solution();
	return 0;
}
