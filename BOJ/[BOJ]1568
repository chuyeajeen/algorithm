/*
[헷갈리는 이유]
1. x=0부터, y=1부터 인덱스 시작
2. x의 범위 : 0 ~ h-1
3. y의 범위 : 1 ~ n
*/


#include<iostream>
#define R_MAX 31
#define C_MAX 11
using namespace std;

int n, m, h, ladder_cnt;
bool visit[R_MAX][C_MAX];
bool flag;
void input()
{
	cin >> n >> m >> h;
	for (int i = 0; i < m; i++)
	{
		int a, b;	//b와 b+1의 세로선을 a번 점섬 위치에서 연결
		cin >> a >> b;
		visit[a-1][b] = true;
	}
}

void check()
{
	for (int i = 1; i <= n; i++)	//1부터 시작하는 이유는 idx-1을 할때 인덱스 접근 오류 안나기위해
	{
		int idx = i;
		for (int j = 0; j < h; j++)
		{
			if (visit[j][idx] == true)idx++;
			else if (idx>1 && visit[j][idx-1] == true)idx--; //인덱스를 줄여야 하니 idx>1인 경우에만 확인해주어야함
		}
		if (idx != i)
		{
			flag =false;
			return;
		}
	}
	flag = true;
	return;
}

void make_ladder(int x, int cnt)
{
	if (flag)
	{
		return;
	}
	else if (cnt==ladder_cnt)
	{
		check();
		return;
	}

	for (int i = x; i < h; i++)
	{
		for (int j = 1; j < n; j++)	//y
		{
			if (visit[i][j] == true) continue;
			else if (visit[i][j+1] == true)continue;
			else if (visit[i][j-1] == true)continue;

			visit[i][j] = true;
			make_ladder(i, cnt + 1);
			visit[i][j] = false;
		}
	}
	return;
}


int main()
{
	input();
	for (ladder_cnt = 0; ladder_cnt <= 3; ladder_cnt++)
	{
		make_ladder(0, 0);
		if (flag)
		{
			cout << ladder_cnt;
			return 0;
		}
	}
	cout << "-1";
	return 0;
}
