
#pragma once

#include <iostream>
#include <vector>
#include<algorithm>
#include<queue>
using namespace std;

char arr[101][101];
int r, c;
int n, shoot[101];
int dx[4] = { 1,-1,0,0 };
int dy[4] = { 0,0,-1,1 };
int visit[101][101];
bool check = false;

void block_down(int low)
{
	int cnt_blockdown=r;
	for (int i = 0; i < r; i++)
	{
		for (int j = 0; j < c; j++)
		{
			if (visit[i][j] == 1)
			{
				int tmp = 0;
				int nx = i;
				bool change = false;
				while (1)
				{
					nx = nx + dx[0];
					if (visit[nx][j] == 1) //같은줄에 visit처리된 곳 있으면 제외
					{
						change = false;
						break;
					}
					else if (nx < r && arr[nx][j] == '.' )
					{
						tmp++;
						change = true;
					}
					else
						break;

				}
				if (cnt_blockdown > tmp && change)cnt_blockdown = tmp;
			}
		}
	}



	//블록 내리기
	for (int i = r - 1; i >= 0; i--)
	{
		for (int j = 0; j < c; j++)
		{
			if (visit[i][j] == 1)
			{
				arr[i][j] = '.';
				arr[i + (dx[0] * +cnt_blockdown)][j] = 'x';
			}
		}
	}

}

void dfs(int x, int y, int &low)
{
	if (visit[x][y] || arr[x][y]=='.')return;
	visit[x][y] = true;

	if (low < x)low = x; //가장 낮은(좌표로는 큰) x 좌표 찾기
	for (int i = 0; i < 4; i++)
	{
		check = true;
		int nx = x + dx[i];
		int ny = y + dy[i];
		if (nx >= 0 && ny >= 0 && nx < r && ny < c && visit[nx][ny]==0 && arr[nx][ny]=='x')
		{
			dfs(nx, ny, low);
		}
	}
}

void breaking(int height, int time)
{
	if (time % 2 == 0) //왼쪽에서 발사
	{
		for (int i = 0; i < c; i++)
		{
			if (arr[height][i] == 'x')
			{
				arr[height][i] = '.';
				for (int k = 0; k < 4; k++)
				{
					int low = 0;
					int nx = height + dx[k];
					int ny = i + dy[k];
					//dfs돌려 연결된 블록 모두 확인 -> 가장 아래쪽 구해서 떨어질 수 있는 depth구함
					dfs(nx, ny, low);
					if (check)
					{
						check = false;
						if (low != r - 1) //클러스터 연결이 바닥과 닿지 않으면 블록 내리기
						{
							block_down(low); // depth만큼 떨어뜨리기
						}
					for (int i = 0; i < r; i++) //visit 초기화
					{
						for (int j = 0; j < c; j++)
							visit[i][j] = 0;
					}
					}
					
				}
				
				break;
			}
		}
	}
	else //오른쪽에서 발사
	{
		for (int i = c-1; i >=0; i--)
		{
			if (arr[height][i] == 'x')
			{
				arr[height][i] = '.';
				for (int k = 0; k < 4; k++)
				{
					int nx = height + dx[k];
					int ny = i + dy[k];
					int low = 0;
					//dfs돌려 연결된 블록 모두 확인 -> 가장 아래쪽 구해서 떨어질 수 있는 depth구함
					dfs(nx, ny, low);
					if (check)
					{
						check = false;
						if (low != r - 1) //클러스터 연결이 바닥과 닿지 않으면 블록 내리기
						{
							block_down(low); // depth만큼 떨어뜨리기
						}
					for (int i = 0; i < r; i++)  //visit 초기화
					{
						for (int j = 0; j < c; j++)
							visit[i][j] = 0;
					}
					}
				}
				
				break;
			}
		}
	}
}

void input()
{
	cin >> r >> c;
	for (int i = 0; i < r; i++)
	{
		string tmp;
		cin >> tmp;

		for (int j = 0; j < c; j++)
		{
			arr[i][j] = tmp[j];
		}
	}

	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> shoot[i];
	}
}

void print()
{
	for (int i = 0; i <r; i++)
	{
		for (int j = 0; j < c; j++)
		{
			cout << arr[i][j];
		}
		cout << "\n";
	}
}
void solution()
{
	int height;
	for (int i = 0; i < n; i++)
	{
		height = r-shoot[i];
		breaking(height, i);
	}
}


int main()
{

	input();
	solution();
	print();
	return 0;
}
