#include<iostream>
#include<queue>
#include<algorithm>
#define MAX 25
using namespace std;

int n, arr[MAX][MAX], visit[MAX][MAX];
int dx[4] = { 0,0,1,-1 };
int dy[4] = { 1,-1,0,0 };
vector<int> answer;
void bfs(int x, int y)
{
	int count = 1;
	queue<pair<int, int>> q;
	q.push({ x, y });
	visit[x][y] = 1;

	while (!q.empty())
	{
		int nx = q.front().first;
		int ny = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nnx = nx + dx[i];
			int nny = ny + dy[i];

			if (nnx < 0 || nny < 0 || nnx >= n || nny >= n)continue;
			if (arr[nnx][nny] == 1 && visit[nnx][nny] == 0)
			{
				count++;
				visit[nnx][nny] = 1;
				q.push({ nnx,nny });
			}
		}
	}
	answer.push_back(count);
	return;
}

int main()
{
	int count = 0;
	cin >> n;

	for (int i = 0; i < n; i++)
	{
		string tmp;
		cin >> tmp;
		for (int j = 0; j < n; j++)
			arr[i][j]=tmp[j]-48;
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (arr[i][j] == 1 && visit[i][j]==0)
			{
				count++;
				bfs(i, j);
			}
		}
	}

	cout << count << "\n";
	sort(answer.begin(), answer.end());
	for (int i = 0; i < answer.size(); i++)
	{
		cout << answer[i] << "\n";
	}

	return 0;
}
