#include<iostream>
#include<queue>
#include<algorithm>
#define MAX 31
using namespace std;

int l, r, c, visit[MAX][MAX][MAX];
char arr[MAX][MAX][MAX];
int dh[6] = { 1,-1,0,0,0,0 };
int dx[6] = { 0,0,1,-1,0,0 };
int dy[6] = { 0,0,0,0,1,-1 };

struct idx {
	int x;
	int y;
	int h;
};

void bfs(idx start)
{
	queue < pair<int,pair<int, int>>> q;
	q.push({ start.h,{start.x,start.y} });
	visit[start.h][start.x][start.y] = 1;
	int answer = -1;
	bool check;
	while (!q.empty())
	{
		int size = q.size();
		answer++;
		check = false;
		while (size--)
		{
			int h = q.front().first;
			int x = q.front().second.first;
			int y = q.front().second.second;
			q.pop();

			if (arr[h][x][y]=='E') {
				check = true;
				break;
			}

			for (int i = 0; i < 6; i++)
			{
				int nh = h + dh[i];
				int nx = x + dx[i];
				int ny = y + dy[i];

				if (nx < 0 || ny < 0 || nh < 0 || nh >= l || nx >= r || ny >= c)continue;
				if (arr[nh][nx][ny] != '#' && visit[nh][nx][ny] == 0)
				{
					visit[nh][nx][ny] = 1;
					q.push({ nh,{nx,ny} });
				}
			}
		}
		if (check)break;
	}

	if (answer > 0 && check) {
		cout << "Escaped in " << answer << " minute(s)." << "\n";
	}
	else
	{
		cout << "Trapped!" << "\n";
	}
}

int main()
{
	while (1)
	{
		cin >> l >> r >> c;
		struct idx start, end;
		if (l == 0 && r == 0 && c == 0)break;
		else
		{
			for (int i = 0; i < l; i++)
			{
				for (int j = 0; j < r; j++)
				{
					string tmp;
					cin >> tmp;
					for (int k = 0; k < c; k++)
					{
						arr[i][j][k] = tmp[k];
						if (tmp[k] == 'S')
						{
							start.h = i;
							start.x = j;
							start.y = k;
						}

					}
				}
			}
			bfs(start);
			//visit 초기화
			for (int i = 0; i < l; i++)
			{
				for (int j = 0; j < r; j++)
				{
					for (int k = 0; k < c; k++)
						visit[i][j][k] = 0;
				}
			}
		}
	}
	return 0;
}
