#include <string>
#include <vector>
#include<queue>
using namespace std;
int ret;

void dfs(vector<int>& numbers, int target, int sum, int depth) {
	if (depth == numbers.size()) {
		if (sum == target)
			ret++;
		return;
	}
	dfs(numbers, target, sum + numbers[depth], depth + 1);
	dfs(numbers, target, sum - numbers[depth], depth + 1);
}


void bfs(vector<int>&number, int tatget)
{
	queue<int> q;
	q.push(number[0]);
	q.push(number[0] * -1);

	for(int depth=1;depth<number.size();depth++)
	{
		int size = q.size();
		while (size--)
		{
			int res = q.front();
			q.pop();
			q.push(res + number[depth]);
			q.push(res - number[depth]);
		}
	}
    int size = q.size();
	for (int i = 0; i < size; i++)
	{
		int res = q.front();
		q.pop();
		if (res == tatget)
		{
			ret++;
		}
	}
}

int solution(vector<int> numbers, int target) {
	dfs(numbers, target, numbers[0], 1);
	dfs(numbers, target, 0, 0);
   // bfs(numbers, target);
	return ret;
}
